//индексы строк и столбцов так же меняются от 0 до бесконечности.
// string [,] table = new string [4,6];
// table [3,2] = "I go to play";

// for (int rows = 0; rows < 4; rows++)
// {
//     for (int columns = 0; columns < 6; columns++)
//     {
//         Console.WriteLine($"-{table[rows,columns]}-");// интерпаляциябвыод на печать массива
//                                                     //в вывод сразу помещаем и строки и столбцы

//     }
// }

/*//Проделаем тоже самое с числами

int [,] matrix = new int [5,7];
matrix [0,4] = 68;

// for (int i = 0; i < 5; i++)
for (int i = 0; i < matrix.GetLength(0); i++) // Get.Lehgth (0) покажет количество строк
{
    //for (int j = 0; j < 7; j++)
    for (int j = 0; j < matrix.GetLength(1); j++)// matrix.GetLength(1) покажет количество столбиков
    {
        Console.Write($"{matrix[i,j]} "); // пробел после фигурных, что бы нули не налипали

    }
Console.WriteLine(); //принудительный переход на новую строку (хитростьб не панацея)
}*/

/*// Метод который будет печатать матрицу и заполнять ее числами.)

int [,] matrix = new int [5,7]; // в данном случае переменная перед методом

void PrintArray( int  [,] matr) // этот метод только выводит матрицу
{
for (int i = 0; i < matr.GetLength(0); i++) 
  {    
    for (int j = 0; j < matr.GetLength(1); j++)
    {
            Console.Write($"{matrix[i,j]} "); 

    }
    
Console.WriteLine(); 
  }
}

void FillArray(int [,] matr)
{
  for (int i = 0; i < matr.GetLength(0); i++) 
  {    
      for (int j = 0; j < matr.GetLength(1); j++)
      {
            matr[i,j] = new Random().Next(6,789);
      } 
  }
}  
 
PrintArray(matrix);
FillArray(matrix);
Console.WriteLine();
PrintArray(matrix);*/

/*int[,] pic = new int[,]
{
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
{0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};

void PrintImage( int  [,] image) 
{
for (int i = 0; i < image.GetLength(0); i++) 
  {    
    for (int j = 0; j < image.GetLength(1); j++)
    {
        //Console.Write($"{image[i,j]} ");
        if(image [i,j] == 0) Console.Write($" "); // исскуственно печатаем пробел
        else  Console.Write($"66");
    }    
    Console.WriteLine();
  }  
}
// потом поржать поменять заполненую картинку, рисуем путем замены одних знаков на другие

//// закрашивание контура

void FillImage(int row, int col)
{
    if(pic[row ,col] == 0) // выяснить про квадратные скобки
    {
        pic[row ,col] = 88;
        FillImage(row - 1, col); //поднялись на строчку выше
        FillImage(row, col - 1); // идем влево
        FillImage(row + 1, col); // вниз
        FillImage(row, col + 1); //  вправо
        
    }
}
PrintImage(pic);
FillImage(11,11);
PrintImage(pic);*/
 


//ВЫЧИСЛЕНИЕ ФАКТОРИАЛА ЧЕРЕЗ РЕКУРСИЮ

/*double Factorial(int n)
{
    //1!=1
    //0!=1

    if (n == 1) return 1;
    else return n * Factorial(n-1);
}
Console.WriteLine(Factorial(68)); // если не хватает типа данных берем дубл*/
 
 /*// Числа Фибоначчи - каждое следуюшие число задается через предыдущие 

 // - 1,1,2,3,5,8,13...

 //f(1) = 1
 //f(2) = 2
 //f(n) = f(n-1)+f(n-2)

 int Fibonacci(int n)
 {
    if (n == 1 || n == 2) return 1;
    else return Fibonacci(n-1) + Fibonacci( n - 2);
 }
 for (int i =1;i<10;i++)
 {
    Console.WriteLine(Fibonacci(i));
 }

 //// если double и число увеличить до 40 жостко тупит, медленно считает*/

 